"""Initial migration

Revision ID: 8f8bc618f975
Revises: 968ea4a0af51
Create Date: 2025-08-14 18:18:13.992092

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op

import fastapi_demo.core.db.types

# revision identifiers, used by Alembic.
revision: str = "8f8bc618f975"
down_revision: str | None = "968ea4a0af51"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column(
            "id",
            fastapi_demo.core.db.types.PGULID(),
            server_default=sa.text("gen_monotonic_ulid()"),
            nullable=False,
        ),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(
        "ix_user_email_trgm",
        "user",
        ["email"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"email": "gin_trgm_ops"},
    )
    op.create_index(
        "ix_user_first_name_trgm",
        "user",
        ["first_name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"first_name": "gin_trgm_ops"},
    )
    op.create_index(
        "ix_user_last_name_trgm",
        "user",
        ["last_name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"last_name": "gin_trgm_ops"},
    )
    op.create_table(
        "apikey",
        sa.Column(
            "id",
            fastapi_demo.core.db.types.PGULID(),
            server_default=sa.text("gen_monotonic_ulid()"),
            nullable=False,
        ),
        sa.Column("key_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("key_hash", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("key_preview", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("owner_id", fastapi_demo.core.db.types.PGULID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("last_used", sa.DateTime(timezone=True), nullable=True),
        sa.Column("revoked", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_apikey_key_id"), "apikey", ["key_id"], unique=True)
    op.create_index(
        "ix_apikey_name_trgm",
        "apikey",
        ["name"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(op.f("ix_apikey_owner_id"), "apikey", ["owner_id"], unique=False)
    op.create_index("ix_key_id_revoked", "apikey", ["key_id", "revoked"], unique=False)
    op.create_table(
        "oauthaccount",
        sa.Column(
            "id",
            fastapi_demo.core.db.types.PGULID(),
            server_default=sa.text("gen_monotonic_ulid()"),
            nullable=False,
        ),
        sa.Column("oauth_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("access_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.Integer(), nullable=True),
        sa.Column("refresh_token", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("user_id", fastapi_demo.core.db.types.PGULID(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_oauthaccount_account_id"), "oauthaccount", ["account_id"], unique=False
    )
    op.create_index(
        op.f("ix_oauthaccount_oauth_name"), "oauthaccount", ["oauth_name"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_oauthaccount_oauth_name"), table_name="oauthaccount")
    op.drop_index(op.f("ix_oauthaccount_account_id"), table_name="oauthaccount")
    op.drop_table("oauthaccount")
    op.drop_index("ix_key_id_revoked", table_name="apikey")
    op.drop_index(op.f("ix_apikey_owner_id"), table_name="apikey")
    op.drop_index(
        "ix_apikey_name_trgm",
        table_name="apikey",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_index(op.f("ix_apikey_key_id"), table_name="apikey")
    op.drop_table("apikey")
    op.drop_index(
        "ix_user_last_name_trgm",
        table_name="user",
        postgresql_using="gin",
        postgresql_ops={"last_name": "gin_trgm_ops"},
    )
    op.drop_index(
        "ix_user_first_name_trgm",
        table_name="user",
        postgresql_using="gin",
        postgresql_ops={"first_name": "gin_trgm_ops"},
    )
    op.drop_index(
        "ix_user_email_trgm",
        table_name="user",
        postgresql_using="gin",
        postgresql_ops={"email": "gin_trgm_ops"},
    )
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###

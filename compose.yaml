services:
  # db:
  #   image: postgres:17.5-bookworm
  #   container_name: fastapi-demo-postgres
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  #     interval: 10s
  #     retries: 5
  #     start_period: 10s
  #     timeout: 10s
  #   volumes:
  #     - fastapi-demo-db-data:/var/lib/postgresql/data/pgdata
  #   # env_file:
  #   #   - .env
  #   environment:
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
  #     - POSTGRES_USER=${POSTGRES_USER?Variable not set}
  #     - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  db:
    image: pgx-ulid-postgres:17.5-bookworm
    container_name: fastapi-demo-postgres
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s
    volumes:
      - fastapi-demo-db-data:/var/lib/postgresql/data/pgdata
    # env_file:
    #   - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    command: ["postgres", "-c", "shared_preload_libraries=pgx_ulid"]

  redis:
    image: redis/redis-stack-server:7.2.0-v17
    container_name: fastapi-demo-redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - fastapi-demo-redis-data:/data

  rabbitmq:
    image: rabbitmq:4.1.3-management
    container_name: fastapi-demo-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
      # Optional tuning:
      - RABBITMQ_NET_TICKTIME=60
    volumes:
      - fastapi-demo-rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      # test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      test:
        [
          "CMD-SHELL",
          "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms",
        ]
      start_period: 5s
      interval: 60s
      timeout: 30s
      retries: 6

  celery_worker:
    image: fastapi-demo:0.0.1
    container_name: fastapi-demo-celery-worker
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        - ENVIRONMENT=prod
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - REDIS_SERVER=redis
      - REDIS_PORT=6379
      - RABBITMQ_SERVER=rabbitmq
      - RABBITMQ_AMQP_PORT=5672
      - FGA_API_URL=http://openfga:8080
      - FGA_STORE_NAME=fastapi-demo
    command: celery -A fastapi_demo.core.celery:${CELERY_APP_NAME} worker --loglevel=info
    healthcheck:
      disable: true

  # --- OpenFGA ---

  primary_postgres:
    image: postgres:17.5-bookworm
    container_name: fastapi-demo-openfga-primary-postgres
    restart: unless-stopped
    command: postgres -c 'max_connections=100'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${OPENFGA_POSTGRES_PRIMARY_USER} -d ${OPENFGA_POSTGRES_PRIMARY_DB}",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - fastapi-demo-openfga-primary-db-data:/var/lib/postgresql/data/pgdata
    # env_file:
    #   - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${OPENFGA_POSTGRES_PRIMARY_PASSWORD?Variable not set}
      - POSTGRES_USER=${OPENFGA_POSTGRES_PRIMARY_USER?Variable not set}
      - POSTGRES_DB=${OPENFGA_POSTGRES_PRIMARY_DB?Variable not set}

  migrate:
    depends_on:
      primary_postgres:
        condition: service_healthy
    image: openfga/openfga:v1.9.2
    container_name: fastapi-demo-openfga-migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://${OPENFGA_POSTGRES_PRIMARY_USER}:${OPENFGA_POSTGRES_PRIMARY_PASSWORD}@primary_postgres:5432/${OPENFGA_POSTGRES_PRIMARY_DB}?sslmode=disable
    # networks:
    #   - openfga

  openfga:
    depends_on:
      primary_postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:v1.9.2
    container_name: fastapi-demo-openfga
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=openfga:8081"]
      interval: 5s
      timeout: 30s
      retries: 3
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://${OPENFGA_POSTGRES_PRIMARY_USER}:${OPENFGA_POSTGRES_PRIMARY_PASSWORD}@primary_postgres:5432/${OPENFGA_POSTGRES_PRIMARY_DB}?sslmode=disable
      # - OPENFGA_DATASTORE_SECONDARY_URI=postgres://${OPENFGA_POSTGRES_SECONDARY_USER}:${OPENFGA_POSTGRES_SECONDARY_PASSWORD}@replica_postgres:5432/${OPENFGA_POSTGRES_SECONDARY_DB}?sslmode=disable

      - OPENFGA_DATASTORE_MAX_OPEN_CONNS=${OPENFGA_DATASTORE_MAX_OPEN_CONNS}
      # max is OPENFGA_DATASTORE_MAX_OPEN_CONNS
      - OPENFGA_DATASTORE_MAX_IDLE_CONNS=${OPENFGA_DATASTORE_MAX_IDLE_CONNS}
      # max is min(idle_in_transaction_session_timeout(if != 0), (tcp_keepalives_idle + tcp_keepalives_interval*tcp_keepalives_count))
      - OPENFGA_DATASTORE_CONN_MAX_IDLE_TIME=${OPENFGA_DATASTORE_CONN_MAX_IDLE_TIME}

      - OPENFGA_AUTHN_METHOD=${OPENFGA_AUTHN_METHOD}
      - OPENFGA_AUTHN_PRESHARED_KEYS=${OPENFGA_AUTHN_PRESHARED_KEYS}
      - OPENFGA_LOG_FORMAT=${OPENFGA_LOG_FORMAT}
      - OPENFGA_LOG_LEVEL=${OPENFGA_LOG_LEVEL}
      - OPENFGA_METRICS_ENABLED=${OPENFGA_METRICS_ENABLED}
      - OPENFGA_DATASTORE_METRICS_ENABLED=${OPENFGA_DATASTORE_METRICS_ENABLED}
      # - OPENFGA_TRACE_ENABLED=${OPENFGA_TRACE_ENABLED}
      # - OPENFGA_TRACE_SAMPLE_RATIO=${OPENFGA_TRACE_SAMPLE_RATIO}

      # # Maximum resolution depth to attempt before throwing an error (defines how deeply nested an authorization model can be)
      # - OPENFGA_RESOLVE_NODE_LIMIT=${OPENFGA_RESOLVE_NODE_LIMIT}
      # # Defines how many nodes on a given level can be evaluated concurrently in a Check resolution tree
      # - OPENFGA_RESOLVE_NODE_BREADTH_LIMIT=${OPENFGA_RESOLVE_NODE_BREADTH_LIMIT}
      # # The maximum number of checks that can be processed concurrently in a batch check request
      # - OPENFGA_MAX_CONCURRENT_CHECKS_PER_BATCH_CHECK=${OPENFGA_MAX_CONCURRENT_CHECKS_PER_BATCH_CHECK}

      - OPENFGA_CHECK_QUERY_CACHE_ENABLED=${OPENFGA_CHECK_QUERY_CACHE_ENABLED}
      # - OPENFGA_CHECK_QUERY_CACHE_TTL=${OPENFGA_CHECK_QUERY_CACHE_TTL}
      - OPENFGA_CHECK_ITERATOR_CACHE_ENABLED=${OPENFGA_CHECK_ITERATOR_CACHE_ENABLED}
      # - OPENFGA_CHECK_ITERATOR_CACHE_TTL=${OPENFGA_CHECK_ITERATOR_CACHE_TTL}
      - OPENFGA_CACHE_CONTROLLER_ENABLED=${OPENFGA_CACHE_CONTROLLER_ENABLED}
      # - OPENFGA_CACHE_CONTROLLER_TTL=${OPENFGA_CACHE_CONTROLLER_TTL}
    command: run
    # networks:
    #   - openfga

  prestart:
    image: fastapi-demo:0.0.1
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        - ENVIRONMENT=prod
    depends_on:
      db:
        condition: service_healthy
        restart: true
      celery_worker:
        condition: service_started
      openfga:
        condition: service_healthy
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - REDIS_SERVER=redis
      - REDIS_PORT=6379
      - RABBITMQ_SERVER=rabbitmq
      - RABBITMQ_AMQP_PORT=5672
      - FGA_API_URL=http://openfga:8080
      - FGA_STORE_NAME=fastapi-demo
      - FGA_TESTS_STORE_NAME=fastapi-demo-tests
      - OPENFGA_STORE_FILE=openfga/stores/prod-store.fga.yaml
      - OPENFGA_TESTS_STORE_FILE=openfga/stores/tests-prod-store.fga.yaml
      - OPENFGA_MODEL_FILE=openfga/models/authorization-model.fga

  fastapi-demo:
    image: fastapi-demo:0.0.1
    container_name: fastapi-demo-api
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        - ENVIRONMENT=prod
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
      openfga:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - REDIS_SERVER=redis
      - REDIS_PORT=6379
      - RABBITMQ_SERVER=rabbitmq
      - RABBITMQ_AMQP_PORT=5672
      - FGA_API_URL=http://openfga:8080
      - FGA_STORE_NAME=fastapi-demo
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

volumes:
  fastapi-demo-db-data: {}
  fastapi-demo-redis-data: {}
  fastapi-demo-openfga-primary-db-data: {}
  # fastapi-demo-openfga-secondary-db-data: {}
  fastapi-demo-rabbitmq-data: {}
